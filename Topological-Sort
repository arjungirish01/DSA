#include<iostream>
#include<vector>
#include<list>
#include<stack>

struct edge {
	int destination;
	edge(int dest) {
		destination = dest;
	}
};

struct vertex {
	std::list<edge>edgelist;
};
struct graph {
	std::vector<vertex>vertices;
};

std::stack<int>st;

void dfs(std::vector<vertex>&vertices,int bt, bool visited[]) {
	visited[bt] = true;
	for (auto i =vertices[bt].edgelist.begin(); i!=vertices[bt].edgelist.end();i++) {
		if (!visited[i->destination]) {
			dfs(vertices,i->destination, visited);
		}
	}
	st.push(bt);
}

void maketopo(std::vector<vertex>&graph, bool visited[]) {

	for (int i = 0; i < graph.size(); i++) {
		if (!visited[i]) {
			dfs(graph,i, visited);
		}
	}
}

int main() {
	bool arr[5] = { false };
	graph g;
	g.vertices.resize(5);
	g.vertices[0].edgelist.emplace_back(2);
	g.vertices[0].edgelist.emplace_back(4);
	g.vertices[1].edgelist.emplace_back(4);
	g.vertices[1].edgelist.emplace_back(3);
	g.vertices[0].edgelist.emplace_back(2);
	g.vertices[3].edgelist.emplace_back(4);
	maketopo(g.vertices,arr);
	std::vector<int>res;
	while (!st.empty()) {
		res.push_back(st.top());
		st.pop();
	}
	for (int i = 0; i < res.size(); i++)
		std::cout << res[i] << " ";
}
